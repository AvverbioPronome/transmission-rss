#!/usr/bin/env ruby

require( 'getoptlong' )
require( 'etc' )

$:.unshift( File.join( File.dirname( __FILE__ ), '../lib' ) )
require( 'transmission-rss' )

include TransmissionRSS

# Default config file path.
configFile = '/etc/transmission-rss.conf'

# Do not edit config file in Gtk GUI by default.
editConfig = false

# Do not fork by default.
dofork = false

# Default not verbose.
verbose = false

# Shows a summary of the command line options.
def usageMessage( configFile )
	$stderr << "#{File.basename( $0 )} [options]
Adds torrents from rss feeds to transmission web frontend.

  -c <file>   Custom config file path. Default: #{configFile}
  -e          Edit config file with Gtk GUI.
  -f          Fork into background after startup.
  -h          This help.
  -v          Verbose mode.

"
	exit( 1 )
end

# Define command-line options.
options = GetoptLong.new(
	[ '-c', GetoptLong::REQUIRED_ARGUMENT ],
	[ '-e', GetoptLong::NO_ARGUMENT ],
	[ '-f', GetoptLong::NO_ARGUMENT ],
	[ '-h', GetoptLong::NO_ARGUMENT ],
	[ '-v', GetoptLong::NO_ARGUMENT ]
)

# Parse given options.
options.each do |option, argument|
	case( option )
		when '-c'
			configFile = argument
		when '-e'
			editConfig = true
		when '-f'
			dofork = true
		when '-h'
			usageMessage( configFile )
		when '-v'
			verbose = true
	end
end

# Seems to be necessary when called from gem installation.
# Otherwise Config is somehow mixed up with RbConfig.
config = TransmissionRSS::Config.instance

# Default configuration.
config.load( {
	'feeds' => [],
	'update_interval' => 600,
	'add_paused' => false,
	'server' => {
		'host' => 'localhost',
		'port' => 9091
	},
	'log_target' => $stderr,
	'privileges' => {}
} )

# Initialize a log instance, configure it and run the consumer in a subthread.
log = Log.instance
log.verbose = verbose
log.target = config.log_target
tLog = Thread.start do log.run end

# Load config file (default or given by argument).
begin
	config.load( configFile )
rescue Errno::ENOENT
	log.add( configFile + ' not found' )
end
log.add( config )

# Drop privileges, if section is given in config file.
if( not config.privileges.empty? )
	Process::Sys.setgid(
		Etc.getgrnam( config.privileges.group ).gid
	)

	Process::Sys.setuid(
		Etc.getpwnam( config.privileges.user ).uid
	)

	log.add(
		'dropped privileges ' +
		config.privileges.user +
		':' +
		config.privileges.group
	)
else
	log.add( 'no privilege dropping' )
end

# Start GUI if config edit option is given.
if( editConfig )
	require( 'transmission-rss/config-editor' )

	Gtk.init

	ConfigEditor.new( configFile, config )
	Gtk.main

	exit( 0 )
end

# Connect reload of config file to SIGHUP.
trap( 'HUP' ) do
	config.load( configFile )
	log.add( 'got hup', config )
end

# Initialize feed aggregator.
aggregator = Aggregator.new

# Initialize communication to transmission.
client = Client.new( config.server.host, config.server.port )

# Add feeds from config file to +Aggregator+ class.
aggregator.feeds.concat( config.feeds )

# Callback for a new item on one of the feeds.
aggregator.on_new_item do |torrentFile|
	Thread.start do
		client.addTorrent( torrentFile, config.add_paused )
	end
end

# Start the aggregation process.
begin
	if( dofork )
		pid = fork do
			aggregator.run( config.update_interval )
		end

		puts( 'forked ' + pid.to_s )
	else
		aggregator.run( config.update_interval )
	end
rescue Interrupt
end
