#!/usr/bin/env ruby

require 'getoptlong'
require 'etc'

$:.unshift(File.dirname(__FILE__) + '/../lib')
require 'transmission-rss'

include TransmissionRSS

# Default config file path.
config_file = '/etc/transmission-rss.conf'

# Do not edit config file in Gtk GUI by default.
edit_config = false

# Do not fork by default.
dofork = false

# Shows a summary of the command line options.
def usage_message( config_file )
  $stderr << "#{File.basename($0)} [option]..
Adds torrents from rss feeds to transmission web frontend.

  -c <file>   Custom config file path. Default: #{config_file}
  -e          Edit config file with Gtk GUI.
  -f          Fork into background after startup.
  -h          This help.

"
  exit(1)
end

# Define command-line options.
options = GetoptLong.new(
  [ '-c', GetoptLong::REQUIRED_ARGUMENT ],
  [ '-e', GetoptLong::NO_ARGUMENT ],
  [ '-f', GetoptLong::NO_ARGUMENT ],
  [ '-h', GetoptLong::NO_ARGUMENT ]
)

# Parse given options.
options.each do |option, argument|
  case(option)
    when '-c'
      config_file = argument
    when '-e'
      edit_config = true
    when '-f'
      dofork = true
    when '-h'
      usage_message(config_file)
  end
end

# Seems to be necessary when called from gem installation.
# Otherwise Config is somehow mixed up with RbConfig.
config = TransmissionRSS::Config.instance

# Default configuration.
config.load({
  'feeds' => [],
  'update_interval' => 600,
  'add_paused' => false,
  'server' => {
    'host' => 'localhost',
    'port' => 9091
  },
  'log_target' => $stderr,
  'privileges' => {}
})

# Initialize a log instance and configure it.
log = Log.instance
log.target = config.log_target
log.level = Logger::DEBUG
log.formatter = proc do |sev, time, prog, msg|
  "#{time.to_i}(#{sev.downcase}) #{msg}\n"
end

# Load config file (default or given by argument).
begin
  config.load(config_file)
  log.target = config.log_target
rescue Errno::ENOENT
  log.error(config_file + ' not found')
end
log.debug(config)

# Drop privileges, if section is given in config file.
if(not config.privileges.empty?)
  Process::Sys.setgid(
    Etc.getgrnam(config.privileges.group).gid
  )

  Process::Sys.setuid(
    Etc.getpwnam(config.privileges.user).uid
  )

  log.debug(
    'dropped privileges ' +
    config.privileges.user +
    ':' +
    config.privileges.group
  )
else
  log.debug('no privilege dropping')
end

# Warn if no feeds are given.
if(config.feeds.empty?)
  log.warn('no feeds given')
end

# Start GUI if config edit option is given.
if(edit_config)
  require 'transmission-rss/config-editor'

  Gtk.init

  ConfigEditor.new(config_file, config)
  Gtk.main

  exit(0)
end

# Connect reload of config file to SIGHUP.
trap('HUP') do
  config.load(config_file)
  log.info('got hup', config)
end

# Initialize feed aggregator.
aggregator = Aggregator.new

# Initialize communication to transmission.
client = Client.new(config.server.host, config.server.port)

# Add feeds from config file to +Aggregator+ class.
aggregator.feeds.concat(config.feeds)

# Callback for a new item on one of the feeds.
aggregator.on_new_item do |torrent_file|
  Thread.start do
    client.add_torrent(torrent_file, :url, config.add_paused)
  end
end

# Start the aggregation process.
begin
  if(dofork)
    pid = fork do
      aggregator.run(config.update_interval)
    end

    puts('forked ' + pid.to_s)
  else
    aggregator.run(config.update_interval)
  end
rescue Interrupt
  log.info('interrupt caught')
end

log.close
