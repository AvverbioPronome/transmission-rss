#!/usr/bin/env ruby

require 'getoptlong'
require 'etc'

$:.unshift(File.dirname(__FILE__) + '/../lib')
require 'transmission-rss'

include TransmissionRSS

# Default config file path.
config_file = '/etc/transmission-rss.conf'

# Do not fork by default.
dofork = false

# No PID file by default.
pid_file = false

# Shows a summary of the command line options.
def usage_message(config_file)
  $stderr << "#{File.basename $0} [option]..
Adds torrents from rss feeds to transmission web frontend.

  -c <file>   Custom config file path. Default: #{config_file}
  -f          Fork into background after startup.
  -h          This help.
  -p <file>   Write PID to file.
  -v          Show program version and exit.

"
  exit(1)
end

# Define command-line options.
options = GetoptLong.new \
  ['-c', GetoptLong::REQUIRED_ARGUMENT],
  ['-f', GetoptLong::NO_ARGUMENT],
  ['-h', GetoptLong::NO_ARGUMENT],
  ['-p', GetoptLong::REQUIRED_ARGUMENT],
  ['-v', GetoptLong::NO_ARGUMENT]

# Parse given options.
options.each do |option, argument|
  case option
    when '-c'
      config_file = argument
    when '-f'
      dofork = true
    when '-h'
      usage_message config_file
    when '-p'
      pid_file = argument
    when '-v'
      puts TransmissionRSS::VERSION
      exit
  end
end

# Seems to be necessary when called from gem installation.
# Otherwise Config is somehow mixed up with RbConfig.
config = TransmissionRSS::Config.instance

# Default configuration.
defaults = {
  'feeds' => [],
  'update_interval' => 600,
  'add_paused' => false,
  'server' => {
    'host' => 'localhost',
    'port' => 9091
  },
  'log_target' => $stderr,
  'fork' => false,
  'pid_file' => false,
  'privileges' => {}
}
config.load defaults

# Initialize a log instance and configure it.
log = Log.instance
log.target = config.log_target
log.level = Logger::DEBUG
log.formatter = proc do |sev, time, prog, msg|
  "#{time.to_i}(#{sev.downcase}) #{msg}\n"
end

# Load config file (default or given by argument).
begin
  config.load config_file
  log.target = config.log_target
rescue Errno::ENOENT
  log.error config_file + ' not found'
end
log.debug config

# Fork value from command line.
config.fork = dofork if dofork

# PID file path from command line.
config.pid_file = pid_file if pid_file

# Drop privileges, if section is given in config file.
unless config.privileges.empty?
  Process::Sys.setgid \
    Etc.getgrnam(config.privileges.group).gid

  Process::Sys.setuid \
    Etc.getpwnam(config.privileges.user).uid

  log.debug \
    'dropped privileges ' +
    config.privileges.user +
    ':' +
    config.privileges.group
else
  log.debug 'no privilege dropping'
end

# Warn if no feeds are given.
log.warn 'no feeds given' if config.feeds.empty?

# Connect reload of config file to SIGHUP.
trap 'HUP' do
  config.load config_file rescue nil
end

# Initialize feed aggregator.
aggregator = Aggregator.new

# Initialize communication to transmission.
client = Client.new config.server.host, config.server.port

# Add feeds from config file to +Aggregator+ class.
aggregator.feeds.concat config.feeds

# Callback for a new item on one of the feeds.
aggregator.on_new_item do |torrent_file|
  client.add_torrent torrent_file, :url, config.add_paused
end

# Save PID.
if config.pid_file
  log.debug 'wrote pid to ' + config.pid_file
  File.write config.pid_file, Process.pid
end

# Start the aggregation process.
begin
  if config.fork
    pid = fork { aggregator.run config.update_interval }
    log.debug 'forked ' + pid.to_s
  else
    log.debug 'pid ' + Process.pid.to_s
    aggregator.run config.update_interval
  end
rescue Interrupt
  log.info 'interrupt caught'
end

log.close
